options {
	JAVA_UNICODE_ESCAPE = false;
	UNICODE_INPUT = true;
	STATIC = false;
}

PARSER_BEGIN(ExampleParser)

/*
 * Probabilist Logic Learner is a system to learn probabilistic logic 
 * programs from data and use its learned programs to make inference 
 * and answer queries.
 *
 * Copyright (C) 2017 Victor Guimarães
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package br.ufrj.cos.logic.parser.example;

import java.util.List;
import java.util.ArrayList;

import br.ufrj.cos.knowledge.example.AtomExample;
import br.ufrj.cos.knowledge.example.ProPprExample;

import br.ufrj.cos.util.AtomFactory;
import br.ufrj.cos.util.VariableGenerator;
import br.ufrj.cos.logic.*;

/**
 * Created on 15/04/17.
 *
 * @author Victor Guimarães
 */
public class ExampleParser {

	protected List probLogFormatExamples;
	protected List proPprFormatExamples;

	public AtomFactory factory = new AtomFactory();
	protected VariableGenerator variableGenerator = new VariableGenerator();

	public List getProbLogFormatExamples() {
		return probLogFormatExamples;
	}

	public List getProPprFormatExamples() {
		return proPprFormatExamples;
	}

}

PARSER_END(ExampleParser)

SKIP : {
	" "
|	"\t"
|	"\r"
|	"\n"
|	< "%" (~["\r", "\n"])* >
}

TOKEN : {
	<PROBLOG_EXAMPLE_PREFIX: "evidence">
|	<TRUE_SIGN: "true">
|	<FALSE_SIGN: "false">
|	<OPEN_PREDICATE_ARGUMENT: "(">
|	<CLOSE_PREDICATE_ARGUMENT: ")">
|	<LIST_SEPARATOR: ",">
|	<POSTIVE_SIGN: "+">
|	<NEGATIVE_SIGN: "-">
|	<END_OF_LINE_CHARACTER: ".">
|	<ANONIMOUS_VARIABLE: "_">
|	<VARIABLE: ["A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","_","-"] )* >
|	<CONSTANT: ["a"-"z"] ( ["a"-"z","A"-"Z","0"-"9","_","-"] )* >
|	<QUOTED:
        (
            "\""
            (
                "\\" ~[]	//any escaped character
                |			//or
                ~["\""]		//any non-quote character
            )*
            "\""
            |
            "\'"
            (
                "\\" ~[]	//any escaped character
                |			//or
                ~["\'"]		//any non-quote character
            )*
            "\'"
        )
	>
}

void parseExamples() :
{

}
{
	{
		probLogFormatExamples = new ArrayList();
		proPprFormatExamples = new ArrayList();
	}

	(
		readProbLogExample(probLogFormatExamples)
		|
		readProPprExample(proPprFormatExamples)
	)* <EOF>
}

void parseExamplesAppend(List probLogFormatExamples, List proPprFormatExamples) :
{

}
{
	(
		readProbLogExample(probLogFormatExamples)
		|
		readProPprExample(proPprFormatExamples)
	)* <EOF>
}

void readProbLogExample(List examples) :
{
	Atom atom;
	boolean positive;

}
{
	<PROBLOG_EXAMPLE_PREFIX> <OPEN_PREDICATE_ARGUMENT> atom = readAtom() <LIST_SEPARATOR> 
	(
		<TRUE_SIGN>
		{positive = true;}
		|
		<FALSE_SIGN>
		{positive = false;}
	)
	<CLOSE_PREDICATE_ARGUMENT> <END_OF_LINE_CHARACTER>
	{examples.add(new AtomExample(atom, positive));}
}

void readProPprExample(List proPprExamples) :
{
	Atom goal;
	Atom example;
	boolean positive;
	List examples = new ArrayList();
}
{
	goal = readAtom()
	(
		(
			<POSTIVE_SIGN>
			{positive = true;}
			|
			<NEGATIVE_SIGN>
			{positive = false;}
		)
		example = readAtom()
		{examples.add(new AtomExample(example, positive));}
	)*
	{proPprExamples.add(new ProPprExample(goal, examples));}
}

Atom readAtom() :
{
	String predicate;
	List terms = new ArrayList();
}
{
	predicate = readPredicate()
	[<OPEN_PREDICATE_ARGUMENT> readTerm(terms) (<LIST_SEPARATOR> readTerm(terms))*  <CLOSE_PREDICATE_ARGUMENT>]
	{
        Predicate value = factory.getPredicate(predicate, terms.size());
        return new Atom(value, terms);
	}
}

String readPredicate() :
{
	Token predicate;
}
{
	predicate = <CONSTANT>
	{return predicate.image;}
}

void readTerm(List<Term> terms) :
{
	Term term;
}
{
	( 	
		term = readConstant()
		{terms.add(term);} 
		|
		term = readVariable()
		{terms.add(term);}
	)
}

Term readConstant() :
{
	Token constant;
}
{
	(
		constant = <CONSTANT>
		|
		constant = <QUOTED>
		// removing surrounding quotes
		{token.image = token.image.substring(1, token.image.length() - 1);}
	)
	{
        return factory.getConstant(token.image);
    }
}

Term readVariable() :
{
	Token variableToken;
	Variable variable;
}
{
	(
	    variableToken = <VARIABLE> { variable = new Variable(variableToken.image); }
	    |
	    variableToken = <ANONIMOUS_VARIABLE> { variable = variableGenerator.next(); }
	)
	{ return variable; }
}
