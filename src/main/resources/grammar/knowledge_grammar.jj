options {
	JAVA_UNICODE_ESCAPE = false;
	UNICODE_INPUT = true;
	STATIC = false;
}

PARSER_BEGIN(KnowledgeParser)

/*
 * Probabilist Logic Learner is a system to learn probabilistic logic 
 * programs from data and use its learned programs to make inference 
 * and answer queries.
 *
 * Copyright (C) 2017 Victor Guimarães
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package br.ufrj.cos.logic.parser.knowledge;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import br.ufrj.cos.logic.*;

import java.util.*;
import br.ufrj.cos.util.AtomFactory;

import javax.script.ScriptException;

import static br.ufrj.cos.util.log.ParsingLog.ERROR_PARSING_LINE;

/**
 * Created on 15/04/17.
 *
 * @author Victor Guimarães
 */
public class KnowledgeParser implements Iterable<Clause>, Iterator<Clause> {

    /**
     * The logger
     */
    public static final Logger logger = LogManager.getLogger();

    public AtomFactory factory = new AtomFactory();
    protected boolean hasNext = true;
    protected Map variableMap = new HashMap();

    @Override
    public boolean hasNext() { return hasNext; }

    @Override
    public Clause next() {
        Clause clause = null;
        try {
            clause = readLine();
        } catch (ParseException e) {
            logger.error(ERROR_PARSING_LINE, e);
        }
        return clause;
    }

    @Override
    public Iterator<Clause> iterator() { return this; }

}

PARSER_END(KnowledgeParser)

SKIP : {
	" "
|	"\t"
|	"\r"
|	"\n"
|	< "%" (~["\r", "\n"])* >
}

TOKEN : {
	<DECIMAL: ((["0"-"9"])* ".") ( ["0"-"9"] )+ >
|   <INTEGER: (["0"-"9"])+>
|	<NEGATION: "not">
|	<VARIABLE: ["A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","_","-"] )* >
|	<CONSTANT: ["a"-"z"] ( ["a"-"z","A"-"Z","0"-"9","_","-"] )* >
|	<OPEN_PREDICATE_ARGUMENT: "(">
|	<CLOSE_PREDICATE_ARGUMENT: ")">
|	<LIST_SEPARATOR: ",">
|	<WEIGHT_SEPARATOR: "::">
|	<OPEN_FEATURES: "{">
|	<CLOSE_FEATURES: "}">
|	<IMPLICATION_SIGN: ":-">
|	<END_OF_LINE_CHARACTER: ".">
|	<ARITY_SEPARATOR_CHARACTER: "/">
|	<FUNCTION_DEFINITION_SIGN: "#">
|	<QUOTED:
    	(
            "\""
            (
                "\\" ~[]	//any escaped character
                |			//or
                ~["\""]		//any non-quote character
            )*
            "\""
            |
            "\'"
            (
                "\\" ~[]	//any escaped character
                |			//or
                ~["\'"]		//any non-quote character
            )*
            "\'"
        )
	>
}

List parseKnowledge() :
{
    Clause clause;
	List clauses;
}
{
	{
		clauses = new ArrayList();
	}

	( clause = readKnowledgeLine() { clauses.add(clause); } )* <EOF>

	{
		return clauses;
	}
}

Collection parseKnowledgeAppend(Collection clauses) :
{
    Clause clause;
}
{
	( clause = readKnowledgeLine() { clauses.add(clause); } )* <EOF>

	{
		return clauses;
	}
}

Clause readLine() :
{
    Clause clause;
}
{
    [ readHasNext() {if (!hasNext) return null; } ]
    clause = readKnowledgeLine()
    [<EOF> { hasNext = false; }]
    { return clause; }
}

protected Clause readKnowledgeLine() :
{
	Clause clause = null;

	boolean weighted = false;
	double weight = -1;

	Atom atom;
	List body;

	// boolean featured = false;
	List features = null;
//	Map variableMap;
}
{
//	{variableMap = new HashMap();}
	// gets the first atom, weighted or not
	// Do not use readFeature() because, if the line is a clause, the weight belongs to the clause, not to the atom
	[weight = readDecimal() <WEIGHT_SEPARATOR> {weighted = true;}]
	(
        atom = readAtom(variableMap)
        (
            // end of line character, it is just an atom, returns it
            <END_OF_LINE_CHARACTER>
            {
                if (weighted) {
                    atom = new WeightedAtom(weight, atom);
                }
                clause = atom;
            }
            |
            // implication sign, it a horn clause (body might still be empty)
            <IMPLICATION_SIGN>
            {
                body = new ArrayList();
            }
            // reads the body (if exists)
            [readLiteral(body, variableMap) (<LIST_SEPARATOR> readLiteral(body, variableMap))*]
            (
                // gets feature(s), if exists
                [
                    <OPEN_FEATURES>
                    {
                        features = new ArrayList();
                    }
                    [readFeature(features, variableMap)
                    (<LIST_SEPARATOR> readFeature(features, variableMap))*]
                    <CLOSE_FEATURES>
                ]
                // end of line character, it is a Horn clause, with a possibly empty body, returns it
                <END_OF_LINE_CHARACTER>
            )
            {
                if (features != null) {
                    clause = new FeaturedClause(atom, new Conjunction(body), new Features(features));
                } else if (weighted) {
                    clause = new WeightedClause(weight, atom, new Conjunction(body));
                } else {
                    clause = new HornClause(atom, new Conjunction(body));
                }
            }
        )
        |
        <FUNCTION_DEFINITION_SIGN>
        clause = readFunction()
    )
	{
		return clause;
	}
}

FunctionalSymbol readFunction() :
{
    String predicate;
    Token arityToken;
    Token function;
    int arity;
}
{
    predicate = readPredicate()
    <ARITY_SEPARATOR_CHARACTER>
    arityToken = <INTEGER>
    { arity = Integer.parseInt(arityToken.image); }
    <IMPLICATION_SIGN>
    function = <QUOTED>
    // removing surrounding quotes
    {function.image = function.image.substring(1, function.image.length() - 1);}
    <END_OF_LINE_CHARACTER>
    {
        try {
            return new FunctionalSymbol(new Predicate(predicate, arity), function.image);
        } catch (ScriptException e) {
            throw new ParseException("Bad formatted function:\t" + e.getMessage());
        }
    }
}

boolean readHasNext() :
{
}
{
    <EOF> {hasNext = false;}
    { return hasNext; }
}

double readDecimal() :
{
	Token decimal;
}
{
	(decimal = <DECIMAL> | decimal = <INTEGER>) {return Double.parseDouble(decimal.image);}
}

Atom readAtom(Map variableMap) :
{
	String predicate;
	List terms = new ArrayList();
}
{
	predicate = readPredicate()
	[<OPEN_PREDICATE_ARGUMENT> readTerm(terms, variableMap)
	(<LIST_SEPARATOR> readTerm(terms, variableMap))*  <CLOSE_PREDICATE_ARGUMENT>]
	{
	    Predicate value = factory.getPredicate(predicate, terms.size());
		return new Atom(value, terms);
	}
}

void readFeature(List features, Map variableMap) :
{
	boolean weighted = false;
	double weight = -1;
	Atom atom = null;
}
{
	[weight = readDecimal() <WEIGHT_SEPARATOR> {weighted = true;}]
	atom = readAtom(variableMap)
	{
		if (weighted) {
			atom = new WeightedAtom(weight, atom);
		}
		features.add(atom);
	}
}

String readPredicate() :
{
	Token predicate;
}
{
	predicate = <CONSTANT>
	{return predicate.image;}
}

void readTerm(List<Term> terms, Map variableMap) :
{
	Term term;
}
{
	(
		term = readConstant()
		{terms.add(term);}
		|
		term = readVariable(variableMap)
		{terms.add(term);}
	)
}

Term readConstant() :
{
	Token constant;
}
{
	(
		constant = <CONSTANT>
		|
		constant = <QUOTED>
		// removing surrounding quotes
		{constant.image = constant.image.substring(1, constant.image.length() - 1);}
	)
	{
	    return factory.getConstant(token.image);
	}
}

Term readVariable(Map variableMap) :
{
	Token variable;
}
{
	variable = <VARIABLE>
	{
		if (!variableMap.containsKey(variable.image)) {
			variableMap.put(variable.image, new Variable(variable.image));
		}

		return (Variable) variableMap.get(variable.image);
	}
}


void readLiteral(List<Literal> literals, Map variableMap) :
{
	boolean negated = false;
	Atom atom;
}
{
	[<NEGATION> {negated = true;}]
	atom = readAtom(variableMap)
	{literals.add(new Literal(atom, negated));}
}
